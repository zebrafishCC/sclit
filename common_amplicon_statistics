##define function to handle multiple samples
shannon = function (freq) {
    sum_freq = sum(freq)
    shan = 0
    for (i in freq) {
        index = -(i/sum_freq)*log2(i/sum_freq)
        shan = shan+index
    }
    return(shan)
}


#define a function for describing how many cells share the same intBCs
intBC_across_cell = function(umi_table, color, ylimit=2000, sample_name = "") {
    intBC_cell = umi_table %>% group_by(intBC) %>% summarise(intBCcell = n_distinct(cellBC))
    print(summary(intBC_cell$intBCcell))
    meanBC = mean(intBC_cell$intBCcell)
    intBC_cell = as.data.frame(table(intBC_cell$intBCcell))
    colnames(intBC_cell) = c("intBC_across_cell","freq" )
    nrows = nrow(intBC_cell)
    intBC_cell = intBC_cell[c(1:8, (nrows-1):nrows),] #select 10 important rows
    ggplot(intBC_cell, aes(intBC_across_cell, freq))+geom_bar(fill = color, stat="identity")+theme_classic()+
       theme(axis.text.x = element_text(angle = 90))+ggtitle(sample_name)+xlab("")+
       #geom_text(label = paste0("mean ", round(meanBC, 2)), x=meanBC+2, y=0.7*ylimit)+
       scale_y_continuous(expand=c(0,0),limits = c(0,ylimit))+
       #geom_vline(xintercept=meanBC, lty=2)+
       theme(axis.text = element_text(size=11, color="black"),axis.title=element_text(size=15,color="black"))
}


#define a function for describing how many intBCs integrated in one cell.
intBC_per_cell = function(umi_table, color, ylimit=1000, sample_name = "") {
    intBC_number = umi_table %>% group_by(cellBC) %>% summarise(intBCnumber = n_distinct(intBC)) 
    print(summary(intBC_number$intBCnumber))
    medianBC = median(intBC_number$intBCnumber)
    intBC_number = as.data.frame(table(intBC_number$intBCnumber))
    colnames(intBC_number) = c("intBC_per_cell","freq" )
    selected_nrows = ifelse(nrow(intBC_number)>20, 20, nrow(intBC_number))
    intBC_number = intBC_number[c(1:selected_nrows),] #select 20 important rows
    ggplot(intBC_number, aes(intBC_per_cell, freq))+geom_bar(fill =color, stat="identity")+theme_classic()+
      theme(axis.text.x = element_text(angle = 90))+ggtitle(sample_name)+xlab("")+
     geom_text(label = paste0("median ", round(medianBC, 2)), x=medianBC+2, y=0.7*ylimit)+
      scale_y_continuous(expand=c(0,0),limits = c(0,ylimit))+geom_vline(xintercept=medianBC, lty=2)+
      theme(axis.text = element_text(size=11, color="black"),axis.title=element_text(size=15,color="black"))
}


#define a function for describing how many intBCs integrated in one cell.
intBC_per_cell_violin = function(umi_table, color, ylimit=1000, sample_name = "") {
    intBC_number = umi_table %>% group_by(cellBC) %>% summarise(intBCnumber = n_distinct(intBC)) 
    print(summary(intBC_number$intBCnumber))
    #medianBC = median(intBC_number$intBCnumber)
    #intBC_number = as.data.frame(table(intBC_number$intBCnumber))
    #colnames(intBC_number) = c("intBC_per_cell","freq" )
    intBC_number$sample = sample_name
    #selected_nrows = ifelse(nrow(intBC_number)>column, column, nrow(intBC_number))
    #intBC_number = intBC_number[c(1:selected_nrows),] #select 20 important rows
    p = ggplot(intBC_number, aes(sample, intBCnumber))+geom_violin(fill =color)+theme_classic()+
      theme(axis.text.x = element_text(angle = 90))+ggtitle(sample_name)+xlab("")+ylab("intBCs_per_cell")+
      scale_y_continuous(expand=c(0,0),limits = c(0,ylimit))+
      geom_boxplot(width=0.3)+
      #geom_text( y=0.95*ylimit, label=paste0("medianBC=",medianBC))+
      #geom_hline(yintercept=medianBC, lty=2)+
      theme(axis.text = element_text(size=11, color="black"),axis.title=element_text(size=15,color="black"))
    return(p)
}

#define a function to illustrate the basic distribution of BCcigars
BCcigars = function(umi_table, sample_name, color) {
    umi_table_selected = umi_table[,c("cellBC","intBC","CIGAR")]
    umi_table_selected$BCcigar = paste(umi_table_selected$intBC,umi_table_selected$CIGAR,sep=":")

    BCcigar = data.frame(table(umi_table_selected$BCcigar))
    BCcigar = BCcigar[order(BCcigar$Freq,decreasing = T),]
    sum_BCcigar = sum(BCcigar$Freq)
   
   BCcigar$sample = sample_name

    MajorBCcigar = filter(BCcigar, cumsum(Freq)<sum_BCcigar*0.95)
    MajorBCcigar = nrow(MajorBCcigar)
    shannonIndex = round(shannon(BCcigar$Freq),2)
    cat(c("The number of effective BCcigars is ",MajorBCcigar, ", The shannox index for BCcigar is", shannonIndex, "\n"))
    
    selected_BCcigar = BCcigar[1:40,]
    cigarIndel = as.character(selected_BCcigar$Var1)
    selected_BCcigar$Var1 = sapply(cigarIndel, function(eachIndel) { ifelse(nchar(eachIndel)>34,  substr(eachIndel,1, 34), eachIndel)}  )
    p = ggplot(selected_BCcigar, aes(x = factor(Var1,levels = unique(Var1)), y = 100*Freq/sum_BCcigar))+theme_classic()+
      scale_y_continuous(expand=c(0,0))+
      geom_col(fill = color)+theme(axis.text.x = element_text(angle = 90))+xlab("")+ylab("Percentage")+
       theme(axis.text = element_text(size=12, color="black"),axis.title=element_text(size=15,color="black"))
    result = list(BCcigar, p, MajorBCcigar, shannonIndex)
    return(result)
}


#need to use a for loop to handle multiple samples? How to save the intermediate results for further calling

#define a function to illustrate the basic distribution of CIGARs
cigar = function(umi_table, sample_name, color) {
    cigar = data.frame(table(umi_table$CIGAR))
    cigar = cigar[order(cigar$Freq,decreasing = T),]

    mut_rate = 1-cigar$Freq[cigar$Var1=="250M"]/sum(cigar$Freq) 
    mut_rate = round(mut_rate,2)
    cat(c("the total mutation rate for samples is ", mut_rate,". \n"))

    sum_cigar = sum(cigar$Freq)
    cigar$sample = sample_name

    Majorcigar = filter(cigar, cumsum(Freq)<sum_cigar*0.95)
    Majorcigar = nrow(Majorcigar)
    shannonIndex = round(shannon(cigar$Freq),2)
    cat(c("The number of effective cigars is ",Majorcigar," The shannox index for ", sample_name, " cigar is", shannonIndex, "\n"))
    selected_cigar = cigar[1:20,]
    cigarIndel = as.character(selected_cigar$Var1)
    selected_cigar$Var1 = sapply(cigarIndel, function(eachIndel) { ifelse(nchar(eachIndel)>20,  substr(eachIndel,1, 20), eachIndel)}  )
    p = ggplot( selected_cigar, aes(x = factor(Var1,levels = unique(Var1)), y = Freq*100/sum_cigar))+theme_classic()+
      scale_y_continuous(expand=c(0,0), limits=c(0,40))+ylab("Percentage")+
      geom_col(fill = color)+theme(axis.text.x = element_text(angle = 90))+xlab("")+
      ggtitle(sample_name)+
       theme(axis.text = element_text(size=12, color="black"),axis.title=element_text(size=15,color="black"))
    result = list(cigar, p, Majorcigar, shannonIndex, mut_rate)
    return(result)
}

#define a function to illustrate the basic distribution of intBCs
intBC = function(umi_table, sample_name) {
    intBC = data.frame(table(umi_table$intBC))
    intBC = intBC[order(intBC$Freq,decreasing = T),]
    intBC$sample = sample_name
    sum_intBC = sum(intBC$Freq)
    MajorintBC = filter(intBC, cumsum(Freq)<sum_intBC*0.95)
    MajorintBC = nrow( MajorintBC)
    shannonIndex = round(shannon(intBC$Freq),2)
    cat(c("The number of effective intBC is ", MajorintBC," The shannox index for intBC is", shannonIndex,".\n"))
    result = list(intBC, MajorintBC, shannonIndex)
    return(result)
}


#define function to handle CIGAR mutation
cigarnmo = function(umi_table, sample_name, color) {
    cigar = data.frame(table(umi_table$CIGAR))
    cigar = cigar[order(cigar$Freq,decreasing = T),]

    mut_rate = 1-cigar$Freq[cigar$Var1=="250M"]/sum(cigar$Freq) 
    mut_rate = round(mut_rate,2)
    cat(c("the total mutation rate for samples is ", mut_rate,". \n"))

    sum_cigar = sum(cigar$Freq)
    cigar$sample = sample_name

    Majorcigar = filter(cigar, cumsum(Freq)<sum_cigar*0.95)
    Majorcigar = nrow(Majorcigar)
    shannonIndex = round(shannon(cigar$Freq),2)
    cat(c("The number of effective cigars is ",Majorcigar," The shannox index for ", sample_name, " cigar is", shannonIndex, "\n"))
    selected_cigar = cigar[1:20,]
    cigarIndel = as.character(selected_cigar$Var1)
    selected_cigar$Var1 = sapply(cigarIndel, function(eachIndel) { ifelse(nchar(eachIndel)>20,  substr(eachIndel,1, 20), eachIndel)}  )
    p = ggplot( selected_cigar, aes(x = factor(Var1,levels = unique(Var1)), y = Freq*100/sum_cigar))+theme_classic()+
      scale_y_continuous(expand=c(0,0), limits=c(0,40))+ylab("Relative frequency (%)")+
      geom_col(fill = color)+theme(axis.text.x = element_text(angle = 90))+xlab("")+
       theme(axis.text = element_text(size=12, color="black"),axis.title=element_text(size=15,color="black"))
    result = list(cigar, p, Majorcigar, shannonIndex, mut_rate)
    return(result)
}


#this function can only apply to individual target sites
site_indel = function(site, color, ylimit=16) {
        site = gsub("[ATCG]", "",  site) %>% str_replace_all(fixed("["), "") %>% str_replace_all(fixed("]"), "")    #remove unecessary strings
        site = site[site!=""]     #remove those reads that could not call the indels
        #r1 = sapply(r1, function(x) ifelse(length(str_split(x, fixed("["))[[1]])>1, str_split(x, fixed("["))[[1]][2], str_split(x, fixed("["))[[1]]))   #running too slow, remove those indels call twice in different targets
        site = data.frame(table(site))
        site = site[order(site$Freq,decreasing = T),]
        sum_indel = sum(site$Freq)
        site$freq = site$Freq/sum_indel
        mutation_rate = round(1-site$freq[1], 3)  #this mutation rate is higher since some un-called indels are also incorporated
        diversity_index = round(shannon(site$Freq), 2) #index for both mutated alleles and non-mutated alleles
        cat(c("the mutation rate is ", mutation_rate,", and the shannon index is ", diversity_index, ". " )) #consider the true shannon index
    
        site = site[-1,]  #only consider those reads show mutations
        sum_indel = sum(site$Freq) #calculate the sum of indels again, since the most frequent one have been removed
        Major_indel = nrow(filter(site, cumsum(Freq)<sum_indel*0.95))  #effective indels, only consider muatated indels
        
        cat(c("Mutated alleles only. The number of effective indels is ",Major_indel, "\n"))

        site$site = factor(site$site,levels = site$site)
        options(repr.plot.width= 8, repr.plot.height=8)
        site_top20 = head(site, 20)  #be careful, indel frequency still consider all alleles, including the non-mutated alleles
        site_top20$freq = 100*site_top20$freq
        p = ggplot(site_top20, aes(site,freq))+geom_bar(stat="identity", fill = color )+theme_classic()+scale_y_continuous(expand=c(0,0), limits = c(0, ylimit))+
            theme(axis.text.x = element_text(angle = 90))+ggtitle(paste0(Major_indel, " unique indels"))+xlab("")+ylab("Relative indel frquency (%)")+
             theme(axis.text = element_text(size=11, color="black"),axis.title=element_text(size=15,color="black"))
        return(p)
    }

#using a percent threshold to remove possible intBCs from sequencing errors
filterIntBC = function(sample, filter_percent) {
    #filename1 = paste0('../targetProcessData/', sample, '_preprocess_pipeline/umi_table.csv')
    umi_table  = sample
    intBC = data.frame(table(umi_table$intBC[nchar(umi_table$intBC)==14]))
    intBC = intBC[order(intBC$Freq, decreasing=T),]
    intBC1 = intBC[cumsum(intBC$Freq)<filter_percent*sum(intBC$Freq),]
    colnames(intBC1)=c("intBC","Freq")
    candidate_barcodes = intBC1$intBC
    umi_table_filter = umi_table %>% filter(intBC %in% candidate_barcodes) 
    #filename2 = paste0('/data1/home/gdpeng/chengchen/dualproject/targetProcessData/', sample, '_preprocess_pipeline/umi_table_filtered.csv')
    #write.csv(umi_table_filter, filename2)
    return(umi_table_filter)
    }
